{"version":3,"file":"static/js/73.7a5e68ef.chunk.js","mappings":"+NAAaA,EAAW,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,SAASC,KAAzB,EAGhBC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,MAAhB,E,SCEvBC,EAAc,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACbN,GAAWO,EAAAA,EAAAA,IAAYV,GAiB3B,OACE,+BACE,SAAC,KAAD,CACDW,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,SAnBgB,SAACC,EAAQC,GAC5BA,EAAQC,YACRC,QAAQC,IAAIJ,EAAOH,MACnBM,QAAQC,IAAIhB,GACFA,EAASiB,KAAI,SAAAC,GAAO,OAAIA,EAAQT,IAAZ,IACpBU,QAAQP,EAAOH,OAAS,EACnCW,MAAMR,EAAOH,KAAO,4BAIjBJ,GACAgB,EAAAA,EAAAA,IAAWT,GAEZ,EAIG,UAIR,UAAC,KAAD,YACE,kCACA,SAAC,KAAD,CACAU,KAAK,OACLb,KAAK,OACLc,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KACR,SAAC,KAAD,CAAchB,KAAK,OAAOiB,UAAU,SACpC,oCACA,SAAC,KAAD,CACAJ,KAAK,MACLb,KAAK,SACLc,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KACV,SAAC,KAAD,CAAchB,KAAK,SAASiB,UAAU,SACtC,mBAAQJ,KAAK,SAAb,+BAQG,E,6BChDUK,EAAS,WACrB,IAAMtB,GAAWC,EAAAA,EAAAA,MAGhB,GAA4BsB,EAAAA,EAAAA,IAAQ,CAClCC,cAAe,CACd1B,OAAQ,MAFH2B,EAAR,EAAQA,SAKN3B,GAAS4B,EALX,EAAkBA,OAKD,UAUf,OAPFC,EAAAA,EAAAA,YAAU,WACV3B,GACE4B,EAAAA,EAAAA,GAAkB9B,GAGnB,GAAE,CAACA,KAGA,+BACE,6BACA,oCACE,oCAAW2B,EAAS,WAApB,IAA+BR,KAAK,cAK7C,EC3BYY,EAAc,WACzB,IAAM7B,GAAWC,EAAAA,EAAAA,MAEX6B,GADS5B,EAAAA,EAAAA,IAAYL,GACKkC,cAE1BC,GADW9B,EAAAA,EAAAA,IAAYV,GACKM,QAAO,SAAAe,GAAO,OAC5CA,EAAQT,KAAK2B,cAAcE,SAASH,EADQ,IAU9C,OACE,+BACG,wBAEGE,EAAiBpB,KAAI,gBAAGsB,EAAH,EAAGA,GAAI9B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAEjB,2BACE,gCAAQD,EAAR,KAAgBC,MAChB,mBAAQ8B,QAAS,kBAdZC,EAc8BF,OAbrDlC,GACMqC,EAAAA,EAAAA,IAAcD,IAFG,IAAAA,CAcY,EAAjB,sBAFOF,EAFQ,OAWhC,E,UC/Bc,SAASI,IAEtB,OACE,iCACE,SAAC,KAAD,KAEE,4BACL,uCACQ,SAACvC,EAAD,KAER,sCACQ,SAACuB,EAAD,KACA,SAACO,EAAD,SAIV,C","sources":["redux/users/users.selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getTasks = state => state.users.contacts.items;\nexport const getIsLoading = state => state.users.contacts.isLoading;\nexport const getError = state => state.users.contacts.error;\nexport const getStatusFilter = state => state.users.filter;","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact  } from \"redux/users/users.operations\";\nimport { getTasks } from 'redux/users/users.selectors';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n  const contacts = useSelector(getTasks);\n  \n  const handleSubmit = (values, actions) => {\n    actions.resetForm();\n    console.log(values.name)\n    console.log(contacts)\nconst names = contacts.map(contact => contact.name);\n    if (names.indexOf(values.name) >= 0) {\n\t\t\talert(values.name + \" is already in contacts.\");\n\t\t\treturn;\n\t\t}\n\n      dispatch(\n      addContact(values) ,\n    );\n    };\n  \n    return (\n      <>\n        <Formik\n       initialValues={{ name: '', number: '' }}\n       onSubmit={handleSubmit}\n        >\n<Form>\n  <h2>Name</h2>\n  <Field       \n  type=\"text\"\n  name=\"name\"\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  required/>\n  <ErrorMessage name=\"name\" component=\"div\" />\n  <h2>Number</h2>\n  <Field\n  type=\"tel\"\n  name=\"number\"\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  required/>\n<ErrorMessage name=\"number\" component=\"div\" />\n<button type=\"submit\">\n  Add contact\n</button>\n         </Form>   \n     </Formik>\n      </>\n          \n    );\n  }\n\n","\nimport {usersFilterAction} from 'redux/users/users.slice';\nimport { useDispatch} from 'react-redux';\nimport { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n\nexport const Filter = () => {\n const dispatch = useDispatch();\n\n  \n  const { register, watch } = useForm({\n    defaultValues: {\n     filter: '',\n    }\n  });\nlet filter = watch('filter');\n\n  \n  useEffect(() => {\n  dispatch(\n    usersFilterAction(filter),\n    );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filter])\n\n    return (\n      <>\n        <form >\n        <h2>Filter</h2>\n          <input {...register(\"filter\")} type=\"text\" />\n        </form>\n      </>\n          \n    );\n}\n\n// Filter.propTypes = {\n//   handleContacts: PropTypes.func.isRequired,\n// };","\nimport React from 'react';\n\nimport { deleteContact  } from 'redux/users/users.operations';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStatusFilter, getTasks } from \"redux/users/users.selectors\";\n\n \nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getStatusFilter);\n  const normalizedFilter = filter.toLowerCase();\n  const contacts = useSelector(getTasks);\n  const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n      );\n\n  const handleDelete = idx => {\ndispatch(\n      deleteContact(idx),\n    );\n\t};\n\n    return (\n      <>\n         <ul>\n            {\n            filteredContacts.map(({ id, name, number }) => (\n                \n                <li key={id}>\n                  <span> {name}: {number}</span>\n                  <button onClick={() =>handleDelete(id)}>Delete</button>\n                </li>\n              ))}\n        </ul>\n      </>\n          \n    );\n}\n","import React from 'react'\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Outlet } from 'react-router-dom';\n\n\nexport default function Contacts() {\n  \n  return (\n    <>\n      <Outlet />\n\n        <div>\n   <h1>Phonebook</h1>\n           <ContactForm />\n\n   <h2>Contacts</h2>\n           <Filter /> \n           <ContactList  />\n         </div> \n      </>\n  )\n}\n"],"names":["getTasks","state","users","contacts","items","getStatusFilter","filter","ContactForm","dispatch","useDispatch","useSelector","initialValues","name","number","onSubmit","values","actions","resetForm","console","log","map","contact","indexOf","alert","addContact","type","pattern","title","required","component","Filter","useForm","defaultValues","register","watch","useEffect","usersFilterAction","ContactList","normalizedFilter","toLowerCase","filteredContacts","includes","id","onClick","idx","deleteContact","Contacts"],"sourceRoot":""}